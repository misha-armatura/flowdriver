syntax = "proto3";

package flowdriver;

// Request configuration message
message RequestConfigProto {
  string url = 1;
  string method = 2;
  map<string, string> headers = 3;
  optional string body = 4;
  AuthConfigProto auth = 5;
  int32 timeout_ms = 6;
}

// Authentication configuration
message AuthConfigProto {
  enum AuthType {
    NONE = 0;
    BASIC = 1;
    BEARER = 2;
    API_KEY = 3;
  }
  
  AuthType type = 1;
  optional string username = 2;
  optional string password = 3;
  optional string token = 4;
  optional string client_id = 5;
  optional string client_secret = 6;
  optional string token_url = 7;
  optional string scope = 8;
  optional string api_key = 9;
  optional string api_key_name = 10;
  optional string api_key_location = 11; // "header" or "query"
}

// Response message
message RequestResultProto {
  int32 status_code = 1;
  map<string, string> headers = 2;
  string body = 3;
  int64 latency_ms = 4;
  string error_message = 5;
}

// Benchmark configuration
message BenchmarkConfigProto {
  int32 iterations = 1;
  int32 concurrent_users = 2;
  int32 ramp_up_time_sec = 3;
  int32 think_time_ms = 4;
}

// Benchmark results
message BenchmarkResultProto {
  int32 total_requests = 1;
  int32 successful_requests = 2;
  int32 failed_requests = 3;
  double avg_response_time_ms = 4;
  double min_response_time_ms = 5;
  double max_response_time_ms = 6;
  double percentile_90_ms = 7;
  double percentile_95_ms = 8;
  double percentile_99_ms = 9;
  repeated RequestResultProto request_results = 10;
}

// FlowDriver service definition
service FlowDriver {
  // Execute a single request
  rpc ExecuteRequest(RequestConfigProto) returns (RequestResultProto) {}
  
  // Execute a benchmark test
  rpc ExecuteBenchmark(BenchmarkConfigProto) returns (BenchmarkResultProto) {}
  
  // Stream benchmark results in real-time
  rpc StreamBenchmark(BenchmarkConfigProto) returns (stream BenchmarkResultProto) {}
} 